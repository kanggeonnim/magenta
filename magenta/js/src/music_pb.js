/* tslint:disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.tensorflow.magenta.NoteSequence', null, global);
goog.exportSymbol('proto.tensorflow.magenta.NoteSequence.ControlChange', null, global);
goog.exportSymbol('proto.tensorflow.magenta.NoteSequence.KeySignature', null, global);
goog.exportSymbol('proto.tensorflow.magenta.NoteSequence.KeySignature.Key', null, global);
goog.exportSymbol('proto.tensorflow.magenta.NoteSequence.KeySignature.Mode', null, global);
goog.exportSymbol('proto.tensorflow.magenta.NoteSequence.Note', null, global);
goog.exportSymbol('proto.tensorflow.magenta.NoteSequence.PartInfo', null, global);
goog.exportSymbol('proto.tensorflow.magenta.NoteSequence.PitchBend', null, global);
goog.exportSymbol('proto.tensorflow.magenta.NoteSequence.PitchName', null, global);
goog.exportSymbol('proto.tensorflow.magenta.NoteSequence.QuantizationInfo', null, global);
goog.exportSymbol('proto.tensorflow.magenta.NoteSequence.Section', null, global);
goog.exportSymbol('proto.tensorflow.magenta.NoteSequence.SectionAnnotation', null, global);
goog.exportSymbol('proto.tensorflow.magenta.NoteSequence.SectionGroup', null, global);
goog.exportSymbol('proto.tensorflow.magenta.NoteSequence.SourceInfo', null, global);
goog.exportSymbol('proto.tensorflow.magenta.NoteSequence.SourceInfo.EncodingType', null, global);
goog.exportSymbol('proto.tensorflow.magenta.NoteSequence.SourceInfo.Parser', null, global);
goog.exportSymbol('proto.tensorflow.magenta.NoteSequence.SourceInfo.SourceType', null, global);
goog.exportSymbol('proto.tensorflow.magenta.NoteSequence.SubsequenceInfo', null, global);
goog.exportSymbol('proto.tensorflow.magenta.NoteSequence.Tempo', null, global);
goog.exportSymbol('proto.tensorflow.magenta.NoteSequence.TextAnnotation', null, global);
goog.exportSymbol('proto.tensorflow.magenta.NoteSequence.TextAnnotation.TextAnnotationType', null, global);
goog.exportSymbol('proto.tensorflow.magenta.NoteSequence.TimeSignature', null, global);
goog.exportSymbol('proto.tensorflow.magenta.SequenceMetadata', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.magenta.NoteSequence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.magenta.NoteSequence.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.magenta.NoteSequence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.magenta.NoteSequence.displayName = 'proto.tensorflow.magenta.NoteSequence';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.magenta.NoteSequence.repeatedFields_ = [5,6,7,8,10,11,12,14,20,21];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.magenta.NoteSequence.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.magenta.NoteSequence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.magenta.NoteSequence} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    filename: jspb.Message.getFieldWithDefault(msg, 2, ""),
    referenceNumber: jspb.Message.getFieldWithDefault(msg, 18, 0),
    collectionName: jspb.Message.getFieldWithDefault(msg, 3, ""),
    ticksPerQuarter: jspb.Message.getFieldWithDefault(msg, 4, 0),
    timeSignaturesList: jspb.Message.toObjectList(msg.getTimeSignaturesList(),
    proto.tensorflow.magenta.NoteSequence.TimeSignature.toObject, includeInstance),
    keySignaturesList: jspb.Message.toObjectList(msg.getKeySignaturesList(),
    proto.tensorflow.magenta.NoteSequence.KeySignature.toObject, includeInstance),
    temposList: jspb.Message.toObjectList(msg.getTemposList(),
    proto.tensorflow.magenta.NoteSequence.Tempo.toObject, includeInstance),
    notesList: jspb.Message.toObjectList(msg.getNotesList(),
    proto.tensorflow.magenta.NoteSequence.Note.toObject, includeInstance),
    totalTime: +jspb.Message.getFieldWithDefault(msg, 9, 0.0),
    totalQuantizedSteps: jspb.Message.getFieldWithDefault(msg, 16, 0),
    pitchBendsList: jspb.Message.toObjectList(msg.getPitchBendsList(),
    proto.tensorflow.magenta.NoteSequence.PitchBend.toObject, includeInstance),
    controlChangesList: jspb.Message.toObjectList(msg.getControlChangesList(),
    proto.tensorflow.magenta.NoteSequence.ControlChange.toObject, includeInstance),
    partInfosList: jspb.Message.toObjectList(msg.getPartInfosList(),
    proto.tensorflow.magenta.NoteSequence.PartInfo.toObject, includeInstance),
    sourceInfo: (f = msg.getSourceInfo()) && proto.tensorflow.magenta.NoteSequence.SourceInfo.toObject(includeInstance, f),
    textAnnotationsList: jspb.Message.toObjectList(msg.getTextAnnotationsList(),
    proto.tensorflow.magenta.NoteSequence.TextAnnotation.toObject, includeInstance),
    sectionAnnotationsList: jspb.Message.toObjectList(msg.getSectionAnnotationsList(),
    proto.tensorflow.magenta.NoteSequence.SectionAnnotation.toObject, includeInstance),
    sectionGroupsList: jspb.Message.toObjectList(msg.getSectionGroupsList(),
    proto.tensorflow.magenta.NoteSequence.SectionGroup.toObject, includeInstance),
    quantizationInfo: (f = msg.getQuantizationInfo()) && proto.tensorflow.magenta.NoteSequence.QuantizationInfo.toObject(includeInstance, f),
    subsequenceInfo: (f = msg.getSubsequenceInfo()) && proto.tensorflow.magenta.NoteSequence.SubsequenceInfo.toObject(includeInstance, f),
    sequenceMetadata: (f = msg.getSequenceMetadata()) && proto.tensorflow.magenta.SequenceMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.magenta.NoteSequence}
 */
proto.tensorflow.magenta.NoteSequence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.magenta.NoteSequence;
  return proto.tensorflow.magenta.NoteSequence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.magenta.NoteSequence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.magenta.NoteSequence}
 */
proto.tensorflow.magenta.NoteSequence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilename(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReferenceNumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCollectionName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTicksPerQuarter(value);
      break;
    case 5:
      var value = new proto.tensorflow.magenta.NoteSequence.TimeSignature;
      reader.readMessage(value,proto.tensorflow.magenta.NoteSequence.TimeSignature.deserializeBinaryFromReader);
      msg.addTimeSignatures(value);
      break;
    case 6:
      var value = new proto.tensorflow.magenta.NoteSequence.KeySignature;
      reader.readMessage(value,proto.tensorflow.magenta.NoteSequence.KeySignature.deserializeBinaryFromReader);
      msg.addKeySignatures(value);
      break;
    case 7:
      var value = new proto.tensorflow.magenta.NoteSequence.Tempo;
      reader.readMessage(value,proto.tensorflow.magenta.NoteSequence.Tempo.deserializeBinaryFromReader);
      msg.addTempos(value);
      break;
    case 8:
      var value = new proto.tensorflow.magenta.NoteSequence.Note;
      reader.readMessage(value,proto.tensorflow.magenta.NoteSequence.Note.deserializeBinaryFromReader);
      msg.addNotes(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTotalTime(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalQuantizedSteps(value);
      break;
    case 10:
      var value = new proto.tensorflow.magenta.NoteSequence.PitchBend;
      reader.readMessage(value,proto.tensorflow.magenta.NoteSequence.PitchBend.deserializeBinaryFromReader);
      msg.addPitchBends(value);
      break;
    case 11:
      var value = new proto.tensorflow.magenta.NoteSequence.ControlChange;
      reader.readMessage(value,proto.tensorflow.magenta.NoteSequence.ControlChange.deserializeBinaryFromReader);
      msg.addControlChanges(value);
      break;
    case 12:
      var value = new proto.tensorflow.magenta.NoteSequence.PartInfo;
      reader.readMessage(value,proto.tensorflow.magenta.NoteSequence.PartInfo.deserializeBinaryFromReader);
      msg.addPartInfos(value);
      break;
    case 13:
      var value = new proto.tensorflow.magenta.NoteSequence.SourceInfo;
      reader.readMessage(value,proto.tensorflow.magenta.NoteSequence.SourceInfo.deserializeBinaryFromReader);
      msg.setSourceInfo(value);
      break;
    case 14:
      var value = new proto.tensorflow.magenta.NoteSequence.TextAnnotation;
      reader.readMessage(value,proto.tensorflow.magenta.NoteSequence.TextAnnotation.deserializeBinaryFromReader);
      msg.addTextAnnotations(value);
      break;
    case 20:
      var value = new proto.tensorflow.magenta.NoteSequence.SectionAnnotation;
      reader.readMessage(value,proto.tensorflow.magenta.NoteSequence.SectionAnnotation.deserializeBinaryFromReader);
      msg.addSectionAnnotations(value);
      break;
    case 21:
      var value = new proto.tensorflow.magenta.NoteSequence.SectionGroup;
      reader.readMessage(value,proto.tensorflow.magenta.NoteSequence.SectionGroup.deserializeBinaryFromReader);
      msg.addSectionGroups(value);
      break;
    case 15:
      var value = new proto.tensorflow.magenta.NoteSequence.QuantizationInfo;
      reader.readMessage(value,proto.tensorflow.magenta.NoteSequence.QuantizationInfo.deserializeBinaryFromReader);
      msg.setQuantizationInfo(value);
      break;
    case 17:
      var value = new proto.tensorflow.magenta.NoteSequence.SubsequenceInfo;
      reader.readMessage(value,proto.tensorflow.magenta.NoteSequence.SubsequenceInfo.deserializeBinaryFromReader);
      msg.setSubsequenceInfo(value);
      break;
    case 19:
      var value = new proto.tensorflow.magenta.SequenceMetadata;
      reader.readMessage(value,proto.tensorflow.magenta.SequenceMetadata.deserializeBinaryFromReader);
      msg.setSequenceMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.magenta.NoteSequence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.magenta.NoteSequence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.magenta.NoteSequence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFilename();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getReferenceNumber();
  if (f !== 0) {
    writer.writeInt64(
      18,
      f
    );
  }
  f = message.getCollectionName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTicksPerQuarter();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getTimeSignaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.tensorflow.magenta.NoteSequence.TimeSignature.serializeBinaryToWriter
    );
  }
  f = message.getKeySignaturesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.tensorflow.magenta.NoteSequence.KeySignature.serializeBinaryToWriter
    );
  }
  f = message.getTemposList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.tensorflow.magenta.NoteSequence.Tempo.serializeBinaryToWriter
    );
  }
  f = message.getNotesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.tensorflow.magenta.NoteSequence.Note.serializeBinaryToWriter
    );
  }
  f = message.getTotalTime();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getTotalQuantizedSteps();
  if (f !== 0) {
    writer.writeInt64(
      16,
      f
    );
  }
  f = message.getPitchBendsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      10,
      f,
      proto.tensorflow.magenta.NoteSequence.PitchBend.serializeBinaryToWriter
    );
  }
  f = message.getControlChangesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.tensorflow.magenta.NoteSequence.ControlChange.serializeBinaryToWriter
    );
  }
  f = message.getPartInfosList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.tensorflow.magenta.NoteSequence.PartInfo.serializeBinaryToWriter
    );
  }
  f = message.getSourceInfo();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.tensorflow.magenta.NoteSequence.SourceInfo.serializeBinaryToWriter
    );
  }
  f = message.getTextAnnotationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.tensorflow.magenta.NoteSequence.TextAnnotation.serializeBinaryToWriter
    );
  }
  f = message.getSectionAnnotationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      20,
      f,
      proto.tensorflow.magenta.NoteSequence.SectionAnnotation.serializeBinaryToWriter
    );
  }
  f = message.getSectionGroupsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      21,
      f,
      proto.tensorflow.magenta.NoteSequence.SectionGroup.serializeBinaryToWriter
    );
  }
  f = message.getQuantizationInfo();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.tensorflow.magenta.NoteSequence.QuantizationInfo.serializeBinaryToWriter
    );
  }
  f = message.getSubsequenceInfo();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.tensorflow.magenta.NoteSequence.SubsequenceInfo.serializeBinaryToWriter
    );
  }
  f = message.getSequenceMetadata();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.tensorflow.magenta.SequenceMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.tensorflow.magenta.NoteSequence.PitchName = {
  UNKNOWN_PITCH_NAME: 0,
  F_FLAT_FLAT: 1,
  C_FLAT_FLAT: 2,
  G_FLAT_FLAT: 3,
  D_FLAT_FLAT: 4,
  A_FLAT_FLAT: 5,
  E_FLAT_FLAT: 6,
  B_FLAT_FLAT: 7,
  F_FLAT: 8,
  C_FLAT: 9,
  G_FLAT: 10,
  D_FLAT: 11,
  A_FLAT: 12,
  E_FLAT: 13,
  B_FLAT: 14,
  F: 15,
  C: 16,
  G: 17,
  D: 18,
  A: 19,
  E: 20,
  B: 21,
  F_SHARP: 22,
  C_SHARP: 23,
  G_SHARP: 24,
  D_SHARP: 25,
  A_SHARP: 26,
  E_SHARP: 27,
  B_SHARP: 28,
  F_SHARP_SHARP: 29,
  C_SHARP_SHARP: 30,
  G_SHARP_SHARP: 31,
  D_SHARP_SHARP: 32,
  A_SHARP_SHARP: 33,
  E_SHARP_SHARP: 34,
  B_SHARP_SHARP: 35
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.magenta.NoteSequence.Note = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.magenta.NoteSequence.Note, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.magenta.NoteSequence.Note.displayName = 'proto.tensorflow.magenta.NoteSequence.Note';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.magenta.NoteSequence.Note.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.magenta.NoteSequence.Note.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.magenta.NoteSequence.Note} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.Note.toObject = function(includeInstance, msg) {
  var f, obj = {
    pitch: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pitchName: jspb.Message.getFieldWithDefault(msg, 11, 0),
    velocity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    startTime: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    quantizedStartStep: jspb.Message.getFieldWithDefault(msg, 13, 0),
    endTime: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    quantizedEndStep: jspb.Message.getFieldWithDefault(msg, 14, 0),
    numerator: jspb.Message.getFieldWithDefault(msg, 5, 0),
    denominator: jspb.Message.getFieldWithDefault(msg, 6, 0),
    instrument: jspb.Message.getFieldWithDefault(msg, 7, 0),
    program: jspb.Message.getFieldWithDefault(msg, 8, 0),
    isDrum: jspb.Message.getFieldWithDefault(msg, 9, false),
    part: jspb.Message.getFieldWithDefault(msg, 10, 0),
    voice: jspb.Message.getFieldWithDefault(msg, 12, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.magenta.NoteSequence.Note}
 */
proto.tensorflow.magenta.NoteSequence.Note.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.magenta.NoteSequence.Note;
  return proto.tensorflow.magenta.NoteSequence.Note.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.magenta.NoteSequence.Note} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.magenta.NoteSequence.Note}
 */
proto.tensorflow.magenta.NoteSequence.Note.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPitch(value);
      break;
    case 11:
      var value = /** @type {!proto.tensorflow.magenta.NoteSequence.PitchName} */ (reader.readEnum());
      msg.setPitchName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVelocity(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartTime(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setQuantizedStartStep(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndTime(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setQuantizedEndStep(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumerator(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDenominator(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInstrument(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProgram(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDrum(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPart(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVoice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.magenta.NoteSequence.Note.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.magenta.NoteSequence.Note.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.magenta.NoteSequence.Note} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.Note.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPitch();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPitchName();
  if (f !== 0.0) {
    writer.writeEnum(
      11,
      f
    );
  }
  f = message.getVelocity();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStartTime();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getQuantizedStartStep();
  if (f !== 0) {
    writer.writeInt64(
      13,
      f
    );
  }
  f = message.getEndTime();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getQuantizedEndStep();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = message.getNumerator();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getDenominator();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getInstrument();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getProgram();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getIsDrum();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getPart();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getVoice();
  if (f !== 0) {
    writer.writeInt32(
      12,
      f
    );
  }
};


/**
 * optional int32 pitch = 1;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.Note.prototype.getPitch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.Note.prototype.setPitch = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional PitchName pitch_name = 11;
 * @return {!proto.tensorflow.magenta.NoteSequence.PitchName}
 */
proto.tensorflow.magenta.NoteSequence.Note.prototype.getPitchName = function() {
  return /** @type {!proto.tensorflow.magenta.NoteSequence.PitchName} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {!proto.tensorflow.magenta.NoteSequence.PitchName} value */
proto.tensorflow.magenta.NoteSequence.Note.prototype.setPitchName = function(value) {
  jspb.Message.setProto3EnumField(this, 11, value);
};


/**
 * optional int32 velocity = 2;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.Note.prototype.getVelocity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.Note.prototype.setVelocity = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional double start_time = 3;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.Note.prototype.getStartTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.Note.prototype.setStartTime = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional int64 quantized_start_step = 13;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.Note.prototype.getQuantizedStartStep = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.Note.prototype.setQuantizedStartStep = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional double end_time = 4;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.Note.prototype.getEndTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.Note.prototype.setEndTime = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional int64 quantized_end_step = 14;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.Note.prototype.getQuantizedEndStep = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.Note.prototype.setQuantizedEndStep = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 numerator = 5;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.Note.prototype.getNumerator = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.Note.prototype.setNumerator = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 denominator = 6;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.Note.prototype.getDenominator = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.Note.prototype.setDenominator = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 instrument = 7;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.Note.prototype.getInstrument = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.Note.prototype.setInstrument = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 program = 8;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.Note.prototype.getProgram = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.Note.prototype.setProgram = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bool is_drum = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.tensorflow.magenta.NoteSequence.Note.prototype.getIsDrum = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.tensorflow.magenta.NoteSequence.Note.prototype.setIsDrum = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional int32 part = 10;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.Note.prototype.getPart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.Note.prototype.setPart = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 voice = 12;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.Note.prototype.getVoice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.Note.prototype.setVoice = function(value) {
  jspb.Message.setProto3IntField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.magenta.NoteSequence.TimeSignature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.magenta.NoteSequence.TimeSignature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.magenta.NoteSequence.TimeSignature.displayName = 'proto.tensorflow.magenta.NoteSequence.TimeSignature';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.magenta.NoteSequence.TimeSignature.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.magenta.NoteSequence.TimeSignature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.magenta.NoteSequence.TimeSignature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.TimeSignature.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    numerator: jspb.Message.getFieldWithDefault(msg, 2, 0),
    denominator: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.magenta.NoteSequence.TimeSignature}
 */
proto.tensorflow.magenta.NoteSequence.TimeSignature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.magenta.NoteSequence.TimeSignature;
  return proto.tensorflow.magenta.NoteSequence.TimeSignature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.magenta.NoteSequence.TimeSignature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.magenta.NoteSequence.TimeSignature}
 */
proto.tensorflow.magenta.NoteSequence.TimeSignature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumerator(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDenominator(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.magenta.NoteSequence.TimeSignature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.magenta.NoteSequence.TimeSignature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.magenta.NoteSequence.TimeSignature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.TimeSignature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getNumerator();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getDenominator();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional double time = 1;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.TimeSignature.prototype.getTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.TimeSignature.prototype.setTime = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional int32 numerator = 2;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.TimeSignature.prototype.getNumerator = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.TimeSignature.prototype.setNumerator = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 denominator = 3;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.TimeSignature.prototype.getDenominator = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.TimeSignature.prototype.setDenominator = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.magenta.NoteSequence.KeySignature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.magenta.NoteSequence.KeySignature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.magenta.NoteSequence.KeySignature.displayName = 'proto.tensorflow.magenta.NoteSequence.KeySignature';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.magenta.NoteSequence.KeySignature.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.magenta.NoteSequence.KeySignature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.magenta.NoteSequence.KeySignature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.KeySignature.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    key: jspb.Message.getFieldWithDefault(msg, 2, 0),
    mode: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.magenta.NoteSequence.KeySignature}
 */
proto.tensorflow.magenta.NoteSequence.KeySignature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.magenta.NoteSequence.KeySignature;
  return proto.tensorflow.magenta.NoteSequence.KeySignature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.magenta.NoteSequence.KeySignature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.magenta.NoteSequence.KeySignature}
 */
proto.tensorflow.magenta.NoteSequence.KeySignature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    case 2:
      var value = /** @type {!proto.tensorflow.magenta.NoteSequence.KeySignature.Key} */ (reader.readEnum());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {!proto.tensorflow.magenta.NoteSequence.KeySignature.Mode} */ (reader.readEnum());
      msg.setMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.magenta.NoteSequence.KeySignature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.magenta.NoteSequence.KeySignature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.magenta.NoteSequence.KeySignature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.KeySignature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getKey();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getMode();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.tensorflow.magenta.NoteSequence.KeySignature.Key = {
  C: 0,
  C_SHARP: 1,
  D_FLAT: 1,
  D: 2,
  D_SHARP: 3,
  E_FLAT: 3,
  E: 4,
  F: 5,
  F_SHARP: 6,
  G_FLAT: 6,
  G: 7,
  G_SHARP: 8,
  A_FLAT: 8,
  A: 9,
  A_SHARP: 10,
  B_FLAT: 10,
  B: 11
};

/**
 * @enum {number}
 */
proto.tensorflow.magenta.NoteSequence.KeySignature.Mode = {
  MAJOR: 0,
  MINOR: 1,
  NOT_SPECIFIED: 2,
  MIXOLYDIAN: 3,
  DORIAN: 4,
  PHRYGIAN: 5,
  LYDIAN: 6,
  LOCRIAN: 7
};

/**
 * optional double time = 1;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.KeySignature.prototype.getTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.KeySignature.prototype.setTime = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional Key key = 2;
 * @return {!proto.tensorflow.magenta.NoteSequence.KeySignature.Key}
 */
proto.tensorflow.magenta.NoteSequence.KeySignature.prototype.getKey = function() {
  return /** @type {!proto.tensorflow.magenta.NoteSequence.KeySignature.Key} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.tensorflow.magenta.NoteSequence.KeySignature.Key} value */
proto.tensorflow.magenta.NoteSequence.KeySignature.prototype.setKey = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Mode mode = 3;
 * @return {!proto.tensorflow.magenta.NoteSequence.KeySignature.Mode}
 */
proto.tensorflow.magenta.NoteSequence.KeySignature.prototype.getMode = function() {
  return /** @type {!proto.tensorflow.magenta.NoteSequence.KeySignature.Mode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.tensorflow.magenta.NoteSequence.KeySignature.Mode} value */
proto.tensorflow.magenta.NoteSequence.KeySignature.prototype.setMode = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.magenta.NoteSequence.Tempo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.magenta.NoteSequence.Tempo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.magenta.NoteSequence.Tempo.displayName = 'proto.tensorflow.magenta.NoteSequence.Tempo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.magenta.NoteSequence.Tempo.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.magenta.NoteSequence.Tempo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.magenta.NoteSequence.Tempo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.Tempo.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    qpm: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.magenta.NoteSequence.Tempo}
 */
proto.tensorflow.magenta.NoteSequence.Tempo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.magenta.NoteSequence.Tempo;
  return proto.tensorflow.magenta.NoteSequence.Tempo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.magenta.NoteSequence.Tempo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.magenta.NoteSequence.Tempo}
 */
proto.tensorflow.magenta.NoteSequence.Tempo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setQpm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.magenta.NoteSequence.Tempo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.magenta.NoteSequence.Tempo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.magenta.NoteSequence.Tempo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.Tempo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getQpm();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double time = 1;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.Tempo.prototype.getTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.Tempo.prototype.setTime = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double qpm = 2;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.Tempo.prototype.getQpm = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.Tempo.prototype.setQpm = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.magenta.NoteSequence.PitchBend = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.magenta.NoteSequence.PitchBend, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.magenta.NoteSequence.PitchBend.displayName = 'proto.tensorflow.magenta.NoteSequence.PitchBend';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.magenta.NoteSequence.PitchBend.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.magenta.NoteSequence.PitchBend.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.magenta.NoteSequence.PitchBend} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.PitchBend.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    bend: jspb.Message.getFieldWithDefault(msg, 2, 0),
    instrument: jspb.Message.getFieldWithDefault(msg, 3, 0),
    program: jspb.Message.getFieldWithDefault(msg, 4, 0),
    isDrum: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.magenta.NoteSequence.PitchBend}
 */
proto.tensorflow.magenta.NoteSequence.PitchBend.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.magenta.NoteSequence.PitchBend;
  return proto.tensorflow.magenta.NoteSequence.PitchBend.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.magenta.NoteSequence.PitchBend} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.magenta.NoteSequence.PitchBend}
 */
proto.tensorflow.magenta.NoteSequence.PitchBend.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBend(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInstrument(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProgram(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDrum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.magenta.NoteSequence.PitchBend.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.magenta.NoteSequence.PitchBend.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.magenta.NoteSequence.PitchBend} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.PitchBend.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getBend();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getInstrument();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getProgram();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getIsDrum();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional double time = 1;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.PitchBend.prototype.getTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.PitchBend.prototype.setTime = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional int32 bend = 2;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.PitchBend.prototype.getBend = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.PitchBend.prototype.setBend = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 instrument = 3;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.PitchBend.prototype.getInstrument = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.PitchBend.prototype.setInstrument = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 program = 4;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.PitchBend.prototype.getProgram = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.PitchBend.prototype.setProgram = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool is_drum = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.tensorflow.magenta.NoteSequence.PitchBend.prototype.getIsDrum = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.tensorflow.magenta.NoteSequence.PitchBend.prototype.setIsDrum = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.magenta.NoteSequence.ControlChange = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.magenta.NoteSequence.ControlChange, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.magenta.NoteSequence.ControlChange.displayName = 'proto.tensorflow.magenta.NoteSequence.ControlChange';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.magenta.NoteSequence.ControlChange.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.magenta.NoteSequence.ControlChange.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.magenta.NoteSequence.ControlChange} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.ControlChange.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    quantizedStep: jspb.Message.getFieldWithDefault(msg, 7, 0),
    controlNumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
    controlValue: jspb.Message.getFieldWithDefault(msg, 3, 0),
    instrument: jspb.Message.getFieldWithDefault(msg, 4, 0),
    program: jspb.Message.getFieldWithDefault(msg, 5, 0),
    isDrum: jspb.Message.getFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.magenta.NoteSequence.ControlChange}
 */
proto.tensorflow.magenta.NoteSequence.ControlChange.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.magenta.NoteSequence.ControlChange;
  return proto.tensorflow.magenta.NoteSequence.ControlChange.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.magenta.NoteSequence.ControlChange} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.magenta.NoteSequence.ControlChange}
 */
proto.tensorflow.magenta.NoteSequence.ControlChange.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setQuantizedStep(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setControlNumber(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setControlValue(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInstrument(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProgram(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsDrum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.magenta.NoteSequence.ControlChange.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.magenta.NoteSequence.ControlChange.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.magenta.NoteSequence.ControlChange} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.ControlChange.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getQuantizedStep();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getControlNumber();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getControlValue();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getInstrument();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getProgram();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getIsDrum();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional double time = 1;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.ControlChange.prototype.getTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.ControlChange.prototype.setTime = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional int64 quantized_step = 7;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.ControlChange.prototype.getQuantizedStep = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.ControlChange.prototype.setQuantizedStep = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 control_number = 2;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.ControlChange.prototype.getControlNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.ControlChange.prototype.setControlNumber = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 control_value = 3;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.ControlChange.prototype.getControlValue = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.ControlChange.prototype.setControlValue = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 instrument = 4;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.ControlChange.prototype.getInstrument = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.ControlChange.prototype.setInstrument = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 program = 5;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.ControlChange.prototype.getProgram = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.ControlChange.prototype.setProgram = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional bool is_drum = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.tensorflow.magenta.NoteSequence.ControlChange.prototype.getIsDrum = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.tensorflow.magenta.NoteSequence.ControlChange.prototype.setIsDrum = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.magenta.NoteSequence.PartInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.magenta.NoteSequence.PartInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.magenta.NoteSequence.PartInfo.displayName = 'proto.tensorflow.magenta.NoteSequence.PartInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.magenta.NoteSequence.PartInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.magenta.NoteSequence.PartInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.magenta.NoteSequence.PartInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.PartInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    part: jspb.Message.getFieldWithDefault(msg, 1, 0),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.magenta.NoteSequence.PartInfo}
 */
proto.tensorflow.magenta.NoteSequence.PartInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.magenta.NoteSequence.PartInfo;
  return proto.tensorflow.magenta.NoteSequence.PartInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.magenta.NoteSequence.PartInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.magenta.NoteSequence.PartInfo}
 */
proto.tensorflow.magenta.NoteSequence.PartInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPart(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.magenta.NoteSequence.PartInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.magenta.NoteSequence.PartInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.magenta.NoteSequence.PartInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.PartInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPart();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 part = 1;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.PartInfo.prototype.getPart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.PartInfo.prototype.setPart = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.tensorflow.magenta.NoteSequence.PartInfo.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.tensorflow.magenta.NoteSequence.PartInfo.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.magenta.NoteSequence.SourceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.magenta.NoteSequence.SourceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.magenta.NoteSequence.SourceInfo.displayName = 'proto.tensorflow.magenta.NoteSequence.SourceInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.magenta.NoteSequence.SourceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.magenta.NoteSequence.SourceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.magenta.NoteSequence.SourceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.SourceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    encodingType: jspb.Message.getFieldWithDefault(msg, 2, 0),
    parser: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.magenta.NoteSequence.SourceInfo}
 */
proto.tensorflow.magenta.NoteSequence.SourceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.magenta.NoteSequence.SourceInfo;
  return proto.tensorflow.magenta.NoteSequence.SourceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.magenta.NoteSequence.SourceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.magenta.NoteSequence.SourceInfo}
 */
proto.tensorflow.magenta.NoteSequence.SourceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.tensorflow.magenta.NoteSequence.SourceInfo.SourceType} */ (reader.readEnum());
      msg.setSourceType(value);
      break;
    case 2:
      var value = /** @type {!proto.tensorflow.magenta.NoteSequence.SourceInfo.EncodingType} */ (reader.readEnum());
      msg.setEncodingType(value);
      break;
    case 3:
      var value = /** @type {!proto.tensorflow.magenta.NoteSequence.SourceInfo.Parser} */ (reader.readEnum());
      msg.setParser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.magenta.NoteSequence.SourceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.magenta.NoteSequence.SourceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.magenta.NoteSequence.SourceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.SourceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourceType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getEncodingType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getParser();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.tensorflow.magenta.NoteSequence.SourceInfo.SourceType = {
  UNKNOWN_SOURCE_TYPE: 0,
  SCORE_BASED: 1,
  PERFORMANCE_BASED: 2
};

/**
 * @enum {number}
 */
proto.tensorflow.magenta.NoteSequence.SourceInfo.EncodingType = {
  UNKNOWN_ENCODING_TYPE: 0,
  MUSIC_XML: 1,
  ABC: 2,
  MIDI: 3,
  MUSICNET: 4
};

/**
 * @enum {number}
 */
proto.tensorflow.magenta.NoteSequence.SourceInfo.Parser = {
  UNKNOWN_PARSER: 0,
  MUSIC21: 1,
  PRETTY_MIDI: 2,
  MAGENTA_MUSIC_XML: 3,
  MAGENTA_MUSICNET: 4,
  MAGENTA_ABC: 5
};

/**
 * optional SourceType source_type = 1;
 * @return {!proto.tensorflow.magenta.NoteSequence.SourceInfo.SourceType}
 */
proto.tensorflow.magenta.NoteSequence.SourceInfo.prototype.getSourceType = function() {
  return /** @type {!proto.tensorflow.magenta.NoteSequence.SourceInfo.SourceType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.tensorflow.magenta.NoteSequence.SourceInfo.SourceType} value */
proto.tensorflow.magenta.NoteSequence.SourceInfo.prototype.setSourceType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional EncodingType encoding_type = 2;
 * @return {!proto.tensorflow.magenta.NoteSequence.SourceInfo.EncodingType}
 */
proto.tensorflow.magenta.NoteSequence.SourceInfo.prototype.getEncodingType = function() {
  return /** @type {!proto.tensorflow.magenta.NoteSequence.SourceInfo.EncodingType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.tensorflow.magenta.NoteSequence.SourceInfo.EncodingType} value */
proto.tensorflow.magenta.NoteSequence.SourceInfo.prototype.setEncodingType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional Parser parser = 3;
 * @return {!proto.tensorflow.magenta.NoteSequence.SourceInfo.Parser}
 */
proto.tensorflow.magenta.NoteSequence.SourceInfo.prototype.getParser = function() {
  return /** @type {!proto.tensorflow.magenta.NoteSequence.SourceInfo.Parser} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.tensorflow.magenta.NoteSequence.SourceInfo.Parser} value */
proto.tensorflow.magenta.NoteSequence.SourceInfo.prototype.setParser = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.magenta.NoteSequence.TextAnnotation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.magenta.NoteSequence.TextAnnotation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.magenta.NoteSequence.TextAnnotation.displayName = 'proto.tensorflow.magenta.NoteSequence.TextAnnotation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.magenta.NoteSequence.TextAnnotation.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.magenta.NoteSequence.TextAnnotation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.magenta.NoteSequence.TextAnnotation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.TextAnnotation.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    quantizedStep: jspb.Message.getFieldWithDefault(msg, 4, 0),
    text: jspb.Message.getFieldWithDefault(msg, 2, ""),
    annotationType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.magenta.NoteSequence.TextAnnotation}
 */
proto.tensorflow.magenta.NoteSequence.TextAnnotation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.magenta.NoteSequence.TextAnnotation;
  return proto.tensorflow.magenta.NoteSequence.TextAnnotation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.magenta.NoteSequence.TextAnnotation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.magenta.NoteSequence.TextAnnotation}
 */
proto.tensorflow.magenta.NoteSequence.TextAnnotation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setQuantizedStep(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 3:
      var value = /** @type {!proto.tensorflow.magenta.NoteSequence.TextAnnotation.TextAnnotationType} */ (reader.readEnum());
      msg.setAnnotationType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.magenta.NoteSequence.TextAnnotation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.magenta.NoteSequence.TextAnnotation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.magenta.NoteSequence.TextAnnotation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.TextAnnotation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getQuantizedStep();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getAnnotationType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.tensorflow.magenta.NoteSequence.TextAnnotation.TextAnnotationType = {
  UNKNOWN: 0,
  CHORD_SYMBOL: 1
};

/**
 * optional double time = 1;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.TextAnnotation.prototype.getTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.TextAnnotation.prototype.setTime = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional int64 quantized_step = 4;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.TextAnnotation.prototype.getQuantizedStep = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.TextAnnotation.prototype.setQuantizedStep = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.tensorflow.magenta.NoteSequence.TextAnnotation.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.tensorflow.magenta.NoteSequence.TextAnnotation.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional TextAnnotationType annotation_type = 3;
 * @return {!proto.tensorflow.magenta.NoteSequence.TextAnnotation.TextAnnotationType}
 */
proto.tensorflow.magenta.NoteSequence.TextAnnotation.prototype.getAnnotationType = function() {
  return /** @type {!proto.tensorflow.magenta.NoteSequence.TextAnnotation.TextAnnotationType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.tensorflow.magenta.NoteSequence.TextAnnotation.TextAnnotationType} value */
proto.tensorflow.magenta.NoteSequence.TextAnnotation.prototype.setAnnotationType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.magenta.NoteSequence.QuantizationInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tensorflow.magenta.NoteSequence.QuantizationInfo.oneofGroups_);
};
goog.inherits(proto.tensorflow.magenta.NoteSequence.QuantizationInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.magenta.NoteSequence.QuantizationInfo.displayName = 'proto.tensorflow.magenta.NoteSequence.QuantizationInfo';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.tensorflow.magenta.NoteSequence.QuantizationInfo.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.tensorflow.magenta.NoteSequence.QuantizationInfo.ResolutionCase = {
  RESOLUTION_NOT_SET: 0,
  STEPS_PER_QUARTER: 1,
  STEPS_PER_SECOND: 2
};

/**
 * @return {proto.tensorflow.magenta.NoteSequence.QuantizationInfo.ResolutionCase}
 */
proto.tensorflow.magenta.NoteSequence.QuantizationInfo.prototype.getResolutionCase = function() {
  return /** @type {proto.tensorflow.magenta.NoteSequence.QuantizationInfo.ResolutionCase} */(jspb.Message.computeOneofCase(this, proto.tensorflow.magenta.NoteSequence.QuantizationInfo.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.magenta.NoteSequence.QuantizationInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.magenta.NoteSequence.QuantizationInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.magenta.NoteSequence.QuantizationInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.QuantizationInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    stepsPerQuarter: jspb.Message.getFieldWithDefault(msg, 1, 0),
    stepsPerSecond: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.magenta.NoteSequence.QuantizationInfo}
 */
proto.tensorflow.magenta.NoteSequence.QuantizationInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.magenta.NoteSequence.QuantizationInfo;
  return proto.tensorflow.magenta.NoteSequence.QuantizationInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.magenta.NoteSequence.QuantizationInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.magenta.NoteSequence.QuantizationInfo}
 */
proto.tensorflow.magenta.NoteSequence.QuantizationInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStepsPerQuarter(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStepsPerSecond(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.magenta.NoteSequence.QuantizationInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.magenta.NoteSequence.QuantizationInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.magenta.NoteSequence.QuantizationInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.QuantizationInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 steps_per_quarter = 1;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.QuantizationInfo.prototype.getStepsPerQuarter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.QuantizationInfo.prototype.setStepsPerQuarter = function(value) {
  jspb.Message.setOneofField(this, 1, proto.tensorflow.magenta.NoteSequence.QuantizationInfo.oneofGroups_[0], value);
};


proto.tensorflow.magenta.NoteSequence.QuantizationInfo.prototype.clearStepsPerQuarter = function() {
  jspb.Message.setOneofField(this, 1, proto.tensorflow.magenta.NoteSequence.QuantizationInfo.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.magenta.NoteSequence.QuantizationInfo.prototype.hasStepsPerQuarter = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 steps_per_second = 2;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.QuantizationInfo.prototype.getStepsPerSecond = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.QuantizationInfo.prototype.setStepsPerSecond = function(value) {
  jspb.Message.setOneofField(this, 2, proto.tensorflow.magenta.NoteSequence.QuantizationInfo.oneofGroups_[0], value);
};


proto.tensorflow.magenta.NoteSequence.QuantizationInfo.prototype.clearStepsPerSecond = function() {
  jspb.Message.setOneofField(this, 2, proto.tensorflow.magenta.NoteSequence.QuantizationInfo.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.magenta.NoteSequence.QuantizationInfo.prototype.hasStepsPerSecond = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.magenta.NoteSequence.SubsequenceInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.magenta.NoteSequence.SubsequenceInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.magenta.NoteSequence.SubsequenceInfo.displayName = 'proto.tensorflow.magenta.NoteSequence.SubsequenceInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.magenta.NoteSequence.SubsequenceInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.magenta.NoteSequence.SubsequenceInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.magenta.NoteSequence.SubsequenceInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.SubsequenceInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    startTimeOffset: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    endTimeOffset: +jspb.Message.getFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.magenta.NoteSequence.SubsequenceInfo}
 */
proto.tensorflow.magenta.NoteSequence.SubsequenceInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.magenta.NoteSequence.SubsequenceInfo;
  return proto.tensorflow.magenta.NoteSequence.SubsequenceInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.magenta.NoteSequence.SubsequenceInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.magenta.NoteSequence.SubsequenceInfo}
 */
proto.tensorflow.magenta.NoteSequence.SubsequenceInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setStartTimeOffset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setEndTimeOffset(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.magenta.NoteSequence.SubsequenceInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.magenta.NoteSequence.SubsequenceInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.magenta.NoteSequence.SubsequenceInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.SubsequenceInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStartTimeOffset();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getEndTimeOffset();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional double start_time_offset = 1;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.SubsequenceInfo.prototype.getStartTimeOffset = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.SubsequenceInfo.prototype.setStartTimeOffset = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double end_time_offset = 2;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.SubsequenceInfo.prototype.getEndTimeOffset = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.SubsequenceInfo.prototype.setEndTimeOffset = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.magenta.NoteSequence.SectionAnnotation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tensorflow.magenta.NoteSequence.SectionAnnotation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.magenta.NoteSequence.SectionAnnotation.displayName = 'proto.tensorflow.magenta.NoteSequence.SectionAnnotation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.magenta.NoteSequence.SectionAnnotation.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.magenta.NoteSequence.SectionAnnotation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.magenta.NoteSequence.SectionAnnotation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.SectionAnnotation.toObject = function(includeInstance, msg) {
  var f, obj = {
    time: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    sectionId: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.magenta.NoteSequence.SectionAnnotation}
 */
proto.tensorflow.magenta.NoteSequence.SectionAnnotation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.magenta.NoteSequence.SectionAnnotation;
  return proto.tensorflow.magenta.NoteSequence.SectionAnnotation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.magenta.NoteSequence.SectionAnnotation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.magenta.NoteSequence.SectionAnnotation}
 */
proto.tensorflow.magenta.NoteSequence.SectionAnnotation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSectionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.magenta.NoteSequence.SectionAnnotation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.magenta.NoteSequence.SectionAnnotation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.magenta.NoteSequence.SectionAnnotation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.SectionAnnotation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTime();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getSectionId();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional double time = 1;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.SectionAnnotation.prototype.getTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.SectionAnnotation.prototype.setTime = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional int64 section_id = 4;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.SectionAnnotation.prototype.getSectionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.SectionAnnotation.prototype.setSectionId = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.magenta.NoteSequence.Section = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.tensorflow.magenta.NoteSequence.Section.oneofGroups_);
};
goog.inherits(proto.tensorflow.magenta.NoteSequence.Section, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.magenta.NoteSequence.Section.displayName = 'proto.tensorflow.magenta.NoteSequence.Section';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.tensorflow.magenta.NoteSequence.Section.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.tensorflow.magenta.NoteSequence.Section.SectionTypeCase = {
  SECTION_TYPE_NOT_SET: 0,
  SECTION_ID: 1,
  SECTION_GROUP: 2
};

/**
 * @return {proto.tensorflow.magenta.NoteSequence.Section.SectionTypeCase}
 */
proto.tensorflow.magenta.NoteSequence.Section.prototype.getSectionTypeCase = function() {
  return /** @type {proto.tensorflow.magenta.NoteSequence.Section.SectionTypeCase} */(jspb.Message.computeOneofCase(this, proto.tensorflow.magenta.NoteSequence.Section.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.magenta.NoteSequence.Section.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.magenta.NoteSequence.Section.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.magenta.NoteSequence.Section} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.Section.toObject = function(includeInstance, msg) {
  var f, obj = {
    sectionId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sectionGroup: (f = msg.getSectionGroup()) && proto.tensorflow.magenta.NoteSequence.SectionGroup.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.magenta.NoteSequence.Section}
 */
proto.tensorflow.magenta.NoteSequence.Section.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.magenta.NoteSequence.Section;
  return proto.tensorflow.magenta.NoteSequence.Section.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.magenta.NoteSequence.Section} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.magenta.NoteSequence.Section}
 */
proto.tensorflow.magenta.NoteSequence.Section.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSectionId(value);
      break;
    case 2:
      var value = new proto.tensorflow.magenta.NoteSequence.SectionGroup;
      reader.readMessage(value,proto.tensorflow.magenta.NoteSequence.SectionGroup.deserializeBinaryFromReader);
      msg.setSectionGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.magenta.NoteSequence.Section.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.magenta.NoteSequence.Section.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.magenta.NoteSequence.Section} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.Section.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSectionGroup();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tensorflow.magenta.NoteSequence.SectionGroup.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 section_id = 1;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.Section.prototype.getSectionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.Section.prototype.setSectionId = function(value) {
  jspb.Message.setOneofField(this, 1, proto.tensorflow.magenta.NoteSequence.Section.oneofGroups_[0], value);
};


proto.tensorflow.magenta.NoteSequence.Section.prototype.clearSectionId = function() {
  jspb.Message.setOneofField(this, 1, proto.tensorflow.magenta.NoteSequence.Section.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.magenta.NoteSequence.Section.prototype.hasSectionId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SectionGroup section_group = 2;
 * @return {?proto.tensorflow.magenta.NoteSequence.SectionGroup}
 */
proto.tensorflow.magenta.NoteSequence.Section.prototype.getSectionGroup = function() {
  return /** @type{?proto.tensorflow.magenta.NoteSequence.SectionGroup} */ (
    jspb.Message.getWrapperField(this, proto.tensorflow.magenta.NoteSequence.SectionGroup, 2));
};


/** @param {?proto.tensorflow.magenta.NoteSequence.SectionGroup|undefined} value */
proto.tensorflow.magenta.NoteSequence.Section.prototype.setSectionGroup = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.tensorflow.magenta.NoteSequence.Section.oneofGroups_[0], value);
};


proto.tensorflow.magenta.NoteSequence.Section.prototype.clearSectionGroup = function() {
  this.setSectionGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.magenta.NoteSequence.Section.prototype.hasSectionGroup = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.magenta.NoteSequence.SectionGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.magenta.NoteSequence.SectionGroup.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.magenta.NoteSequence.SectionGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.magenta.NoteSequence.SectionGroup.displayName = 'proto.tensorflow.magenta.NoteSequence.SectionGroup';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.magenta.NoteSequence.SectionGroup.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.magenta.NoteSequence.SectionGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.magenta.NoteSequence.SectionGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.magenta.NoteSequence.SectionGroup} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.SectionGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    sectionsList: jspb.Message.toObjectList(msg.getSectionsList(),
    proto.tensorflow.magenta.NoteSequence.Section.toObject, includeInstance),
    numTimes: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.magenta.NoteSequence.SectionGroup}
 */
proto.tensorflow.magenta.NoteSequence.SectionGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.magenta.NoteSequence.SectionGroup;
  return proto.tensorflow.magenta.NoteSequence.SectionGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.magenta.NoteSequence.SectionGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.magenta.NoteSequence.SectionGroup}
 */
proto.tensorflow.magenta.NoteSequence.SectionGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tensorflow.magenta.NoteSequence.Section;
      reader.readMessage(value,proto.tensorflow.magenta.NoteSequence.Section.deserializeBinaryFromReader);
      msg.addSections(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumTimes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.magenta.NoteSequence.SectionGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.magenta.NoteSequence.SectionGroup.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.magenta.NoteSequence.SectionGroup} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.NoteSequence.SectionGroup.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSectionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tensorflow.magenta.NoteSequence.Section.serializeBinaryToWriter
    );
  }
  f = message.getNumTimes();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * repeated Section sections = 1;
 * @return {!Array.<!proto.tensorflow.magenta.NoteSequence.Section>}
 */
proto.tensorflow.magenta.NoteSequence.SectionGroup.prototype.getSectionsList = function() {
  return /** @type{!Array.<!proto.tensorflow.magenta.NoteSequence.Section>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.magenta.NoteSequence.Section, 1));
};


/** @param {!Array.<!proto.tensorflow.magenta.NoteSequence.Section>} value */
proto.tensorflow.magenta.NoteSequence.SectionGroup.prototype.setSectionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tensorflow.magenta.NoteSequence.Section=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.magenta.NoteSequence.Section}
 */
proto.tensorflow.magenta.NoteSequence.SectionGroup.prototype.addSections = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tensorflow.magenta.NoteSequence.Section, opt_index);
};


proto.tensorflow.magenta.NoteSequence.SectionGroup.prototype.clearSectionsList = function() {
  this.setSectionsList([]);
};


/**
 * optional int32 num_times = 2;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.SectionGroup.prototype.getNumTimes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.SectionGroup.prototype.setNumTimes = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.tensorflow.magenta.NoteSequence.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tensorflow.magenta.NoteSequence.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string filename = 2;
 * @return {string}
 */
proto.tensorflow.magenta.NoteSequence.prototype.getFilename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.tensorflow.magenta.NoteSequence.prototype.setFilename = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 reference_number = 18;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.prototype.getReferenceNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.prototype.setReferenceNumber = function(value) {
  jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional string collection_name = 3;
 * @return {string}
 */
proto.tensorflow.magenta.NoteSequence.prototype.getCollectionName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.tensorflow.magenta.NoteSequence.prototype.setCollectionName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 ticks_per_quarter = 4;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.prototype.getTicksPerQuarter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.prototype.setTicksPerQuarter = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated TimeSignature time_signatures = 5;
 * @return {!Array.<!proto.tensorflow.magenta.NoteSequence.TimeSignature>}
 */
proto.tensorflow.magenta.NoteSequence.prototype.getTimeSignaturesList = function() {
  return /** @type{!Array.<!proto.tensorflow.magenta.NoteSequence.TimeSignature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.magenta.NoteSequence.TimeSignature, 5));
};


/** @param {!Array.<!proto.tensorflow.magenta.NoteSequence.TimeSignature>} value */
proto.tensorflow.magenta.NoteSequence.prototype.setTimeSignaturesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.tensorflow.magenta.NoteSequence.TimeSignature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.magenta.NoteSequence.TimeSignature}
 */
proto.tensorflow.magenta.NoteSequence.prototype.addTimeSignatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.tensorflow.magenta.NoteSequence.TimeSignature, opt_index);
};


proto.tensorflow.magenta.NoteSequence.prototype.clearTimeSignaturesList = function() {
  this.setTimeSignaturesList([]);
};


/**
 * repeated KeySignature key_signatures = 6;
 * @return {!Array.<!proto.tensorflow.magenta.NoteSequence.KeySignature>}
 */
proto.tensorflow.magenta.NoteSequence.prototype.getKeySignaturesList = function() {
  return /** @type{!Array.<!proto.tensorflow.magenta.NoteSequence.KeySignature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.magenta.NoteSequence.KeySignature, 6));
};


/** @param {!Array.<!proto.tensorflow.magenta.NoteSequence.KeySignature>} value */
proto.tensorflow.magenta.NoteSequence.prototype.setKeySignaturesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.tensorflow.magenta.NoteSequence.KeySignature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.magenta.NoteSequence.KeySignature}
 */
proto.tensorflow.magenta.NoteSequence.prototype.addKeySignatures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.tensorflow.magenta.NoteSequence.KeySignature, opt_index);
};


proto.tensorflow.magenta.NoteSequence.prototype.clearKeySignaturesList = function() {
  this.setKeySignaturesList([]);
};


/**
 * repeated Tempo tempos = 7;
 * @return {!Array.<!proto.tensorflow.magenta.NoteSequence.Tempo>}
 */
proto.tensorflow.magenta.NoteSequence.prototype.getTemposList = function() {
  return /** @type{!Array.<!proto.tensorflow.magenta.NoteSequence.Tempo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.magenta.NoteSequence.Tempo, 7));
};


/** @param {!Array.<!proto.tensorflow.magenta.NoteSequence.Tempo>} value */
proto.tensorflow.magenta.NoteSequence.prototype.setTemposList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.tensorflow.magenta.NoteSequence.Tempo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.magenta.NoteSequence.Tempo}
 */
proto.tensorflow.magenta.NoteSequence.prototype.addTempos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.tensorflow.magenta.NoteSequence.Tempo, opt_index);
};


proto.tensorflow.magenta.NoteSequence.prototype.clearTemposList = function() {
  this.setTemposList([]);
};


/**
 * repeated Note notes = 8;
 * @return {!Array.<!proto.tensorflow.magenta.NoteSequence.Note>}
 */
proto.tensorflow.magenta.NoteSequence.prototype.getNotesList = function() {
  return /** @type{!Array.<!proto.tensorflow.magenta.NoteSequence.Note>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.magenta.NoteSequence.Note, 8));
};


/** @param {!Array.<!proto.tensorflow.magenta.NoteSequence.Note>} value */
proto.tensorflow.magenta.NoteSequence.prototype.setNotesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.tensorflow.magenta.NoteSequence.Note=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.magenta.NoteSequence.Note}
 */
proto.tensorflow.magenta.NoteSequence.prototype.addNotes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.tensorflow.magenta.NoteSequence.Note, opt_index);
};


proto.tensorflow.magenta.NoteSequence.prototype.clearNotesList = function() {
  this.setNotesList([]);
};


/**
 * optional double total_time = 9;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.prototype.getTotalTime = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.prototype.setTotalTime = function(value) {
  jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional int64 total_quantized_steps = 16;
 * @return {number}
 */
proto.tensorflow.magenta.NoteSequence.prototype.getTotalQuantizedSteps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/** @param {number} value */
proto.tensorflow.magenta.NoteSequence.prototype.setTotalQuantizedSteps = function(value) {
  jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * repeated PitchBend pitch_bends = 10;
 * @return {!Array.<!proto.tensorflow.magenta.NoteSequence.PitchBend>}
 */
proto.tensorflow.magenta.NoteSequence.prototype.getPitchBendsList = function() {
  return /** @type{!Array.<!proto.tensorflow.magenta.NoteSequence.PitchBend>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.magenta.NoteSequence.PitchBend, 10));
};


/** @param {!Array.<!proto.tensorflow.magenta.NoteSequence.PitchBend>} value */
proto.tensorflow.magenta.NoteSequence.prototype.setPitchBendsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 10, value);
};


/**
 * @param {!proto.tensorflow.magenta.NoteSequence.PitchBend=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.magenta.NoteSequence.PitchBend}
 */
proto.tensorflow.magenta.NoteSequence.prototype.addPitchBends = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 10, opt_value, proto.tensorflow.magenta.NoteSequence.PitchBend, opt_index);
};


proto.tensorflow.magenta.NoteSequence.prototype.clearPitchBendsList = function() {
  this.setPitchBendsList([]);
};


/**
 * repeated ControlChange control_changes = 11;
 * @return {!Array.<!proto.tensorflow.magenta.NoteSequence.ControlChange>}
 */
proto.tensorflow.magenta.NoteSequence.prototype.getControlChangesList = function() {
  return /** @type{!Array.<!proto.tensorflow.magenta.NoteSequence.ControlChange>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.magenta.NoteSequence.ControlChange, 11));
};


/** @param {!Array.<!proto.tensorflow.magenta.NoteSequence.ControlChange>} value */
proto.tensorflow.magenta.NoteSequence.prototype.setControlChangesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.tensorflow.magenta.NoteSequence.ControlChange=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.magenta.NoteSequence.ControlChange}
 */
proto.tensorflow.magenta.NoteSequence.prototype.addControlChanges = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.tensorflow.magenta.NoteSequence.ControlChange, opt_index);
};


proto.tensorflow.magenta.NoteSequence.prototype.clearControlChangesList = function() {
  this.setControlChangesList([]);
};


/**
 * repeated PartInfo part_infos = 12;
 * @return {!Array.<!proto.tensorflow.magenta.NoteSequence.PartInfo>}
 */
proto.tensorflow.magenta.NoteSequence.prototype.getPartInfosList = function() {
  return /** @type{!Array.<!proto.tensorflow.magenta.NoteSequence.PartInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.magenta.NoteSequence.PartInfo, 12));
};


/** @param {!Array.<!proto.tensorflow.magenta.NoteSequence.PartInfo>} value */
proto.tensorflow.magenta.NoteSequence.prototype.setPartInfosList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.tensorflow.magenta.NoteSequence.PartInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.magenta.NoteSequence.PartInfo}
 */
proto.tensorflow.magenta.NoteSequence.prototype.addPartInfos = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.tensorflow.magenta.NoteSequence.PartInfo, opt_index);
};


proto.tensorflow.magenta.NoteSequence.prototype.clearPartInfosList = function() {
  this.setPartInfosList([]);
};


/**
 * optional SourceInfo source_info = 13;
 * @return {?proto.tensorflow.magenta.NoteSequence.SourceInfo}
 */
proto.tensorflow.magenta.NoteSequence.prototype.getSourceInfo = function() {
  return /** @type{?proto.tensorflow.magenta.NoteSequence.SourceInfo} */ (
    jspb.Message.getWrapperField(this, proto.tensorflow.magenta.NoteSequence.SourceInfo, 13));
};


/** @param {?proto.tensorflow.magenta.NoteSequence.SourceInfo|undefined} value */
proto.tensorflow.magenta.NoteSequence.prototype.setSourceInfo = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.tensorflow.magenta.NoteSequence.prototype.clearSourceInfo = function() {
  this.setSourceInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.magenta.NoteSequence.prototype.hasSourceInfo = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * repeated TextAnnotation text_annotations = 14;
 * @return {!Array.<!proto.tensorflow.magenta.NoteSequence.TextAnnotation>}
 */
proto.tensorflow.magenta.NoteSequence.prototype.getTextAnnotationsList = function() {
  return /** @type{!Array.<!proto.tensorflow.magenta.NoteSequence.TextAnnotation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.magenta.NoteSequence.TextAnnotation, 14));
};


/** @param {!Array.<!proto.tensorflow.magenta.NoteSequence.TextAnnotation>} value */
proto.tensorflow.magenta.NoteSequence.prototype.setTextAnnotationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.tensorflow.magenta.NoteSequence.TextAnnotation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.magenta.NoteSequence.TextAnnotation}
 */
proto.tensorflow.magenta.NoteSequence.prototype.addTextAnnotations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.tensorflow.magenta.NoteSequence.TextAnnotation, opt_index);
};


proto.tensorflow.magenta.NoteSequence.prototype.clearTextAnnotationsList = function() {
  this.setTextAnnotationsList([]);
};


/**
 * repeated SectionAnnotation section_annotations = 20;
 * @return {!Array.<!proto.tensorflow.magenta.NoteSequence.SectionAnnotation>}
 */
proto.tensorflow.magenta.NoteSequence.prototype.getSectionAnnotationsList = function() {
  return /** @type{!Array.<!proto.tensorflow.magenta.NoteSequence.SectionAnnotation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.magenta.NoteSequence.SectionAnnotation, 20));
};


/** @param {!Array.<!proto.tensorflow.magenta.NoteSequence.SectionAnnotation>} value */
proto.tensorflow.magenta.NoteSequence.prototype.setSectionAnnotationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 20, value);
};


/**
 * @param {!proto.tensorflow.magenta.NoteSequence.SectionAnnotation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.magenta.NoteSequence.SectionAnnotation}
 */
proto.tensorflow.magenta.NoteSequence.prototype.addSectionAnnotations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 20, opt_value, proto.tensorflow.magenta.NoteSequence.SectionAnnotation, opt_index);
};


proto.tensorflow.magenta.NoteSequence.prototype.clearSectionAnnotationsList = function() {
  this.setSectionAnnotationsList([]);
};


/**
 * repeated SectionGroup section_groups = 21;
 * @return {!Array.<!proto.tensorflow.magenta.NoteSequence.SectionGroup>}
 */
proto.tensorflow.magenta.NoteSequence.prototype.getSectionGroupsList = function() {
  return /** @type{!Array.<!proto.tensorflow.magenta.NoteSequence.SectionGroup>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tensorflow.magenta.NoteSequence.SectionGroup, 21));
};


/** @param {!Array.<!proto.tensorflow.magenta.NoteSequence.SectionGroup>} value */
proto.tensorflow.magenta.NoteSequence.prototype.setSectionGroupsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 21, value);
};


/**
 * @param {!proto.tensorflow.magenta.NoteSequence.SectionGroup=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tensorflow.magenta.NoteSequence.SectionGroup}
 */
proto.tensorflow.magenta.NoteSequence.prototype.addSectionGroups = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 21, opt_value, proto.tensorflow.magenta.NoteSequence.SectionGroup, opt_index);
};


proto.tensorflow.magenta.NoteSequence.prototype.clearSectionGroupsList = function() {
  this.setSectionGroupsList([]);
};


/**
 * optional QuantizationInfo quantization_info = 15;
 * @return {?proto.tensorflow.magenta.NoteSequence.QuantizationInfo}
 */
proto.tensorflow.magenta.NoteSequence.prototype.getQuantizationInfo = function() {
  return /** @type{?proto.tensorflow.magenta.NoteSequence.QuantizationInfo} */ (
    jspb.Message.getWrapperField(this, proto.tensorflow.magenta.NoteSequence.QuantizationInfo, 15));
};


/** @param {?proto.tensorflow.magenta.NoteSequence.QuantizationInfo|undefined} value */
proto.tensorflow.magenta.NoteSequence.prototype.setQuantizationInfo = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.tensorflow.magenta.NoteSequence.prototype.clearQuantizationInfo = function() {
  this.setQuantizationInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.magenta.NoteSequence.prototype.hasQuantizationInfo = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional SubsequenceInfo subsequence_info = 17;
 * @return {?proto.tensorflow.magenta.NoteSequence.SubsequenceInfo}
 */
proto.tensorflow.magenta.NoteSequence.prototype.getSubsequenceInfo = function() {
  return /** @type{?proto.tensorflow.magenta.NoteSequence.SubsequenceInfo} */ (
    jspb.Message.getWrapperField(this, proto.tensorflow.magenta.NoteSequence.SubsequenceInfo, 17));
};


/** @param {?proto.tensorflow.magenta.NoteSequence.SubsequenceInfo|undefined} value */
proto.tensorflow.magenta.NoteSequence.prototype.setSubsequenceInfo = function(value) {
  jspb.Message.setWrapperField(this, 17, value);
};


proto.tensorflow.magenta.NoteSequence.prototype.clearSubsequenceInfo = function() {
  this.setSubsequenceInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.magenta.NoteSequence.prototype.hasSubsequenceInfo = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional SequenceMetadata sequence_metadata = 19;
 * @return {?proto.tensorflow.magenta.SequenceMetadata}
 */
proto.tensorflow.magenta.NoteSequence.prototype.getSequenceMetadata = function() {
  return /** @type{?proto.tensorflow.magenta.SequenceMetadata} */ (
    jspb.Message.getWrapperField(this, proto.tensorflow.magenta.SequenceMetadata, 19));
};


/** @param {?proto.tensorflow.magenta.SequenceMetadata|undefined} value */
proto.tensorflow.magenta.NoteSequence.prototype.setSequenceMetadata = function(value) {
  jspb.Message.setWrapperField(this, 19, value);
};


proto.tensorflow.magenta.NoteSequence.prototype.clearSequenceMetadata = function() {
  this.setSequenceMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.tensorflow.magenta.NoteSequence.prototype.hasSequenceMetadata = function() {
  return jspb.Message.getField(this, 19) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tensorflow.magenta.SequenceMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tensorflow.magenta.SequenceMetadata.repeatedFields_, null);
};
goog.inherits(proto.tensorflow.magenta.SequenceMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.tensorflow.magenta.SequenceMetadata.displayName = 'proto.tensorflow.magenta.SequenceMetadata';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tensorflow.magenta.SequenceMetadata.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tensorflow.magenta.SequenceMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.tensorflow.magenta.SequenceMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tensorflow.magenta.SequenceMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.SequenceMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getFieldWithDefault(msg, 1, ""),
    artist: jspb.Message.getFieldWithDefault(msg, 2, ""),
    genreList: jspb.Message.getRepeatedField(msg, 3),
    composersList: jspb.Message.getRepeatedField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tensorflow.magenta.SequenceMetadata}
 */
proto.tensorflow.magenta.SequenceMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tensorflow.magenta.SequenceMetadata;
  return proto.tensorflow.magenta.SequenceMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tensorflow.magenta.SequenceMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tensorflow.magenta.SequenceMetadata}
 */
proto.tensorflow.magenta.SequenceMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setArtist(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addGenre(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addComposers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tensorflow.magenta.SequenceMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tensorflow.magenta.SequenceMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tensorflow.magenta.SequenceMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tensorflow.magenta.SequenceMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getArtist();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getGenreList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getComposersList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional string title = 1;
 * @return {string}
 */
proto.tensorflow.magenta.SequenceMetadata.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.tensorflow.magenta.SequenceMetadata.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string artist = 2;
 * @return {string}
 */
proto.tensorflow.magenta.SequenceMetadata.prototype.getArtist = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.tensorflow.magenta.SequenceMetadata.prototype.setArtist = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string genre = 3;
 * @return {!Array.<string>}
 */
proto.tensorflow.magenta.SequenceMetadata.prototype.getGenreList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<string>} value */
proto.tensorflow.magenta.SequenceMetadata.prototype.setGenreList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.tensorflow.magenta.SequenceMetadata.prototype.addGenre = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.tensorflow.magenta.SequenceMetadata.prototype.clearGenreList = function() {
  this.setGenreList([]);
};


/**
 * repeated string composers = 4;
 * @return {!Array.<string>}
 */
proto.tensorflow.magenta.SequenceMetadata.prototype.getComposersList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<string>} value */
proto.tensorflow.magenta.SequenceMetadata.prototype.setComposersList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.tensorflow.magenta.SequenceMetadata.prototype.addComposers = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.tensorflow.magenta.SequenceMetadata.prototype.clearComposersList = function() {
  this.setComposersList([]);
};


goog.object.extend(exports, proto.tensorflow.magenta);
